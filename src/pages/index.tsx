import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import Logo from '/public/logo.svg'
import axios from 'axios'
import { useState, useEffect, ChangeEvent, FormEvent } from "react";

type WeatherMain = "Clear" | "Clouds" | "Rain" | "Thunderstorm" | "Snow";


const weatherImages: Record<WeatherMain, string> = {
  "Clear": "/sunny.svg",
  "Clouds": "/cloudy.svg",
  "Rain": "/rainy.svg",
  "Thunderstorm": "/partly cloudy.svg",
  "Snow": "/snowy.svg"
};

export default function Home() {
  const [currentWeather, setCurrentWeather] = useState<any>(null);
  const [fiveDayWeather, setFiveDayWeather] = useState<any>(null);
  const [cityName, setCityName] = useState<string>('');
  const apiKey = process.env.NEXT_PUBLIC_API;

  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setCityName(e.target.value);
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    try {
      if (!cityName) return;

      const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric`;
      const currentWeatherResponse = await axios.get(currentWeatherUrl);
      setCurrentWeather(currentWeatherResponse.data);

      const fiveDayWeatherUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${apiKey}&units=metric`;
      const fiveDayWeatherResponse = await axios.get(fiveDayWeatherUrl);
      const filteredFiveDayWeather = filterFiveDayWeather(fiveDayWeatherResponse.data.list);
      setFiveDayWeather(filteredFiveDayWeather);
    } catch (error) {
      console.log(error);
    }
  };

  const filterFiveDayWeather = (weatherList: any[]) => {
    const filteredWeather: any[] = [];
    const dates: string[] = [];

    weatherList.forEach((item: any) => {
      const date = item.dt_txt.split(' ')[0];
      if (!dates.includes(date)) {
        dates.push(date);
        filteredWeather.push(item);
      }
    });
    return filteredWeather;
  };

  return (
    <>
      <Head>
        <title>OpenWeather Forecast</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.main}>
        <div className={styles.header}>
          <Image className={styles.logo} src={Logo} width={500} height={100} alt='logo' />
          <div className={styles.searchBar} >
            <form onSubmit={handleSubmit}>
              <input className={styles.input} type="text" value={cityName} onChange={handleInputChange} placeholder="Enter city name" />
              <button className={styles.submit} type="submit">Go</button>
            </form>
          </div>
        </div>
        <div className={styles.weather}>
          {currentWeather && (
            <div>
              <h2 className={styles.cityName} >{currentWeather.name}</h2>
              <div className={styles.currentWeather} >
                <p className={styles.todays}>Todays Forecast</p>
                <h3 className={styles.updated} >{new Date(currentWeather.dt * 1000).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</h3>
                <p className={styles.currentTemp} >{currentWeather.main.temp}°C</p>
                <p className={styles.currentWind} >Wind Speed: {currentWeather.wind.speed}</p>
                <p className={styles.currentCondition} >{currentWeather.weather[0].main}</p>
                {currentWeather.weather[0].main in weatherImages && (
                  <img className={styles.currentIcon} src={weatherImages[currentWeather.weather[0].main as WeatherMain]} alt={currentWeather.weather[0].main} />
                )}
              </div>
            </div>
          )}
          {fiveDayWeather && fiveDayWeather.length > 0 && (
            <div>
              <h2 className={styles.fiveCity} >Five-Day Weather Forecast</h2>
              {fiveDayWeather.map((item: any, index: number) => (
                <div className={styles.fiveDayWeather} key={index}>
                  {item.weather[0].main in weatherImages && (
                    <img className={styles.fiveIcon} src={weatherImages[item.weather[0].main as WeatherMain]} alt={item.weather[0].main} />
                  )}
                  <p className={styles.fiveConditon} >{item.weather[0].main}</p>
                  <p className={styles.fiveTemp} >{item.main.temp.toFixed(1)}°C</p>
                  <p className={styles.fiveWind} >Wind Speed: {item.wind.speed}</p>
                  <h3 className={styles.date} >{item.dt_txt.split(' ')[0]}</h3>

                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </>
  );
}
